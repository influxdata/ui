version: 2.1

jobs:
  build-image:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing ./monitor-ci/.env
      - run:
          name: Build the ui docker image
          no_output_timeout: 15m
          command: |
            docker build \
              --build-arg UI_SHA=testing \
              --build-arg CLOUD_URL=http://localhost/auth \
              --build-arg WEBPACK_FILE=fast \
              -t quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} \
              -f ./ui/docker/Dockerfile.chronograf.prod \
              ./ui
            mkdir -p docker-cache
            docker save -o docker-cache/image.tar quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1}
      - save_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - docker-cache
  build-oss-image:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing.oss ./monitor-ci/.env
      - run:
          name: Build the ui oss docker image
          no_output_timeout: 15m
          command: |
            docker build \
              --build-arg UI_SHA=testing \
              --build-arg WEBPACK_FILE=fast \
              -t quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} \
              -f ./ui/docker/Dockerfile.chronograf.prod \
              ./ui
            mkdir -p docker-cache-oss
            docker save -o docker-cache-oss/image.tar quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1}
      - save_cache:
          key: UI_OSS_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - docker-cache-oss
  build-prod-image:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Build the ui docker image
          no_output_timeout: 15m
          command: |
            docker build \
              --build-arg HONEYBADGER_KEY=${HONEYBADGER_KEY} \
              --build-arg INJECT_HEADER="<script>(function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', '${GTM_ID}'); </script><script>window.userpilotSettings = {token: '72cf72g10'}</script><script src = 'https://js.userpilot.io/sdk/latest.js'></script>" \
              --build-arg INJECT_BODY="<!-- Google Tag Manager (noscript) --> <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=${GTM_ID}\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript> <!-- End Google Tag Manager (noscript) -->" \
              --build-arg UI_SHA=${CIRCLE_SHA1} \
              --build-arg CLOUD_URL=/auth \
              -t quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} \
              -f ./ui/docker/Dockerfile.chronograf.prod \
              ./ui
            mkdir -p docker-cache
            docker save -o docker-cache/image.tar quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1}
      - save_cache:
          key: UI_PROD_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - docker-cache
  build-lighthouse-image:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing ./monitor-ci/.env
      - run:
          name: Build the ui docker image
          no_output_timeout: 15m
          command: |
            docker build \
              --build-arg UI_SHA=testing \
              --build-arg CLOUD_URL=http://localhost/auth \
              -t quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} \
              -f ./ui/docker/Dockerfile.chronograf.prod \
              ./ui
            mkdir -p docker-cache
            docker save -o docker-cache/image.tar quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1}
      - save_cache:
          key: UI_LIGHTHOUSE_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - docker-cache
  deploy:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout:
          path: ./ui
      - restore_cache:
          key: UI_PROD_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Load the prod image
          command: |
            docker load < ~/docker-cache/image.tar
      - run:
          name: Push the image to quay
          command: |
            docker tag quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} quay.io/influxdb/influxdb-ui:latest
            docker push quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1}
            docker push quay.io/influxdb/influxdb-ui:latest
      - run:
          name: Deploy the image
          command: |
            cd ./monitor-ci/c2updater
            export C2UPDATER_SIGNING_KEY=${ARGO_KEY}
            GO111MODULE=on GOPATH=/go go mod download && go run ./ ${CIRCLE_SHA1} quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} quay.io/influxdb/influxdb-ui@$(docker image inspect quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} --format '{{.Id}}' | tr -d '\n')
  share-testing-image:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout:
          path: ./ui
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Load the prod image
          command: |
            docker load < ~/docker-cache/image.tar
      - run:
          name: Push the image to quay
          command: |
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
            docker push quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1}
            docker push quay.io/influxdb/ui-acceptance:latest
  cloud-e2e:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    parallelism: 10
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing.cloud ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=cypress && make build NODE=ingress && make build NODE=dex
            docker load < ~/docker-cache/image.tar
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run e2e tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.cloud.yml -f compose/fig.cypress.yml run cypress ./node_modules/.bin/cypress run --browser chrome --config numTestsKeptInMemory=1 --spec "$(cd ../ui; circleci tests glob "./cypress/e2e/{cloud,shared}/**/*.test.ts" | circleci tests split | paste -sd "," -)"
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            # The cypress image used within the ui-e2e image is a non-standard slim image and its definition and versions are
            # maintained here: https://github.com/influxdata/cypress-slim
            - run: docker tag local/cypress:latest quay.io/influxdb/ui-e2e:${CIRCLE_SHA1}
            - run: docker tag quay.io/influxdb/ui-e2e:${CIRCLE_SHA1} quay.io/influxdb/ui-e2e:latest
            - run: docker push quay.io/influxdb/ui-e2e:${CIRCLE_SHA1}
            - run: docker push quay.io/influxdb/ui-e2e:latest
  oss-e2e:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    parallelism: 10
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_OSS_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing.oss ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=cypress && make build NODE=ingress
            docker load < ~/docker-cache-oss/image.tar
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
      - run:
          name: Rebuild Ingress (may be removable after some time?)
          command: cd ./monitor-ci; make rebuild NODE=ingress
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run e2e tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.oss.yml -f compose/fig.cypress.yml run cypress ./node_modules/.bin/cypress run --browser chrome --config numTestsKeptInMemory=1 --spec "$(cd ../ui; circleci tests glob "./cypress/e2e/{oss,shared}/**/*.test.ts" | circleci tests split | paste -sd "," -)"
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
  cloud-e2e-firefox:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    parallelism: 10
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing.cloud ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=cypress && make build NODE=ingress && make build NODE=dex
            docker load < ~/docker-cache/image.tar
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run e2e tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.cloud.yml -f compose/fig.cypress.yml run cypress ./node_modules/.bin/cypress run --browser firefox --config numTestsKeptInMemory=1 --spec "$(cd ../ui; circleci tests glob "./cypress/e2e/shared/**/*.test.ts" | circleci tests split | paste -sd "," -)"
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
  smoke:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing.cloud ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=ingress && make build NODE=dex
            docker load < ~/docker-cache/image.tar
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run smoke tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.cloud.yml -f compose/fig.cypress.yml run cypress-smoke
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
  unit:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/influxdata/ui
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Restore Yarn Package Cache'
      - run:
          command: |
            set +e
            npx yarn install
            npx yarn prettier
          name: 'Install Dependencies'
      - run: yarn generate
      - run:
          name: parallel jest tests
          command: |
            set +e
            TESTFILES=$(circleci tests glob "src/**/*.test.ts*" | circleci tests split --split-by=timings)
            npx yarn test:circleci $TESTFILES
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
          destination: raw-test-output
      - save_cache:
          key: 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Save Yarn Package Cache'
          paths:
            - ~/.cache/yarn
  lint:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/influxdata/ui
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Restore Yarn Package Cache'
      - run:
          command: |
            set +e
            yarn install
          name: 'Install Dependencies'
      - run: yarn generate
      - run:
          name: parallel eslint
          command: |
            set +e
            TESTFILES=$(circleci tests glob "src/**/*.ts*" "cypress/**/*.ts*" | circleci tests split --split-by=filesize)
            yarn eslint:circleci $TESTFILES
      - save_cache:
          key: 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Save Yarn Package Cache'
          paths:
            - ~/.cache/yarn
  cloud-lighthouse:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_LIGHTHOUSE_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - checkout_monitor_ci
      - run:
          name: Copy over the lighthouse variables
          command: |
            cp ./monitor-ci/env.lighthouse ./monitor-ci/.env;
      - run:
          name: Add Ingress Host to /etc/hosts File
          command: |
            INGRESS_HOST=$(grep "INGRESS_HOST=" ./monitor-ci/.env | cut -d '=' -f2);
            grep -qxF "127.0.0.1 ${INGRESS_HOST}" /etc/hosts || sudo -- sh -c "echo \"127.0.0.1 ${INGRESS_HOST}\" >> /etc/hosts";
      - run:
          name: Update the images we're using
          command: |
            docker pull quay.io/influxdb/lighthouse;
            cd ./monitor-ci && sudo rm -rf .persist/certs/ && make update && make build NODE=ingress;
            docker load < ~/docker-cache/image.tar;
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest;
      - run:
          name: Run lighthouse
          no_output_timeout: 10m
          command: |
            cd monitor-ci;
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
                    make lhr MASTER_BRANCH=1 GITHUB_TOKEN="${UI_CI_TOKEN}" INFLUXDB_TOKEN="${INFLUXDB_TOKEN}" INFLUXDB_ORGID="${INFLUXDB_ORGID}" INFLUXDB_URL="${INFLUXDB_URL}" DASHBOARD_URL="${DASHBOARD_URL}";
            else
                    make lhr PR="${CIRCLE_PULL_REQUEST}" GITHUB_TOKEN="${UI_CI_TOKEN}" INFLUXDB_TOKEN="${INFLUXDB_TOKEN}" INFLUXDB_ORGID="${INFLUXDB_ORGID}" INFLUXDB_URL="${INFLUXDB_URL}" DASHBOARD_URL="${DASHBOARD_URL}";
            fi
      - store_artifacts:
          path: /tmp/results.html
      - store_artifacts:
          path: /tmp/results.json
  # This job should be similar to cd-app-e2e-test job running in IDPE: https://github.com/influxdata/idpe/blob/master/.circleci/config.yml
  cloud-e2e-k8s-idpe:
    machine:
      # use Ubuntu 20 image as jsonnet requires libraries newer than in Ubuntu 14
      image: ubuntu-2004:202008-01
    # E2e tests deploy kind and are very resource intensive.
    # 2xlarge is the largest resource class for "machine"; there is no 2xlarge+ like the docker runners.
    resource_class: 2xlarge
    working_directory: ~/
    steps:
      - checkout:
          path: ./ui
      - install_jsonnet_binary
      - install_kind_binary
      - install_kubectl_binary
      - install_kubecfg_binary
      - attach_workspace:
          at: /tmp/workspace
      - checkout_k8s_idpe
      - checkout_idpe
      - checkout_monitor_ci
      - run:
          name: Make test artifact directories
          command: |
            mkdir -p /tmp/artifacts
            mkdir -p /tmp/cypress_artifacts
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing.cloud ./monitor-ci/.env
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Build ui-e2e image
          command: |
            cd ./monitor-ci && make build NODE=cypress
      - run:
          name: Push ui-e2e image tagged with this commit
          command: |
            docker tag local/cypress:latest quay.io/influxdb/ui-e2e:${CIRCLE_SHA1}
            docker push quay.io/influxdb/ui-e2e:${CIRCLE_SHA1}
      - run:
          name: Run E2e test
          command: cd ./idpe/ && export QUAY_CD_USER=$QUAY_USER && export QUAY_CD_PASSWORD=$QUAY_PASS && export UI_E2E_TESTS_IMAGE="quay.io/influxdb/ui-e2e:${CIRCLE_SHA1}" && ./scripts/ci/cd-app-e2e-test.bash | tee /tmp/artifacts/e2e-test.log
          no_output_timeout: '15m' # Sometimes gathering the images takes too long. Go 50% over the default 10m timeout.
          environment:
            USE_K8SIDPE_LOCAL_TOOLS: '1' # this is needed as otherwise kubecfg is not able to talk to kind API server via localhost
            USE_CONTAINERD_BIND_DIR: '1' # enable using tmpfs to avoid IO performance issues in CircleCI machine executor
            ARTIFACTS_DIRECTORY: '/tmp/artifacts'
      - store_artifacts:
          path: /tmp/artifacts/
          destination: 'tests/e2e'
      - store_artifacts:
          path: /tmp/kindlogs/
          destination: 'kind_e2e_logs'
      - store_artifacts:
          path: /home/circleci/k8s-idpe/.tmp-kind-hostpath-volume/cypress/
          destination: cypress-videos
      # TODO: enable this when we remove cloud-e2e job
      # - when:
      #     condition:
      #       equal: [master, << pipeline.git.branch >>]
      #     steps:
      #       # The cypress image used within the ui-e2e image is a non-standard slim image and its definition and versions are
      #       # maintained here: https://github.com/influxdata/cypress-slim
      #       - run: docker tag quay.io/influxdb/ui-e2e:${CIRCLE_SHA1} quay.io/influxdb/ui-e2e:latest
      #       - run: docker push quay.io/influxdb/ui-e2e:latest
  monitor-ci-tests:
    docker:
      - image: circleci/golang:1.15-node
    steps:
      - checkout
      - run:
          name: Run monitor-ci tests
          command: API_KEY=${MONITOR_CI_API_KEY} PULL_REQUEST=${CIRCLE_PULL_REQUEST} MONITOR_CI_BRANCH="master" UI_BRANCH=${CIRCLE_BRANCH} SHA=${CIRCLE_SHA1} ./scripts/run-monitor-ci-tests.bash
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/build-oss-image
          destination: test_artifacts/results/build-oss-image
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/oss-e2e
          destination: test_artifacts/results/oss-e2e
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/build-image
          destination: test_artifacts/results/build-image
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/cloud-e2e
          destination: test_artifacts/results/cloud-e2e
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/cloud-e2e-firefox
          destination: test_artifacts/results/cloud-e2e-firefox
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/cloud-e2e-k8s-idpe
          destination: test_artifacts/results/cloud-e2e-k8s-idpe
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/cloud-lighthouse
          destination: test_artifacts/results/cloud-lighthouse
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/smoke
          destination: test_artifacts/results/smoke
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/build-prod-image
          destination: test_artifacts/results/build-prod-image
      - store_artifacts:
          path: monitor-ci/test-artifacts/results/deploy
          destination: test_artifacts/results/deploy
workflows:
  version: 2
  build:
    jobs:
      - build-oss-image
      - build-image
      - build-lighthouse-image
      - build-prod-image:
          filters:
            branches:
              only:
                - master
      - unit
      - lint
      - cloud-lighthouse:
          requires:
            - build-lighthouse-image
      # - cloud-e2e-k8s-idpe:
      #     requires:
      #       - build-image
      - cloud-e2e:
          requires:
            - build-image
      - oss-e2e:
          requires:
            - build-oss-image
      - smoke:
          requires:
            - build-image
      - cloud-e2e-firefox:
          requires:
            - build-image
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - build-prod-image
            - unit
            - lint
            - smoke
            - cloud-e2e
            # TODO: uncomment this when we disable cloud-e2e
            # - cloud-e2e-k8s-idpe
      - share-testing-image:
          filters:
            branches:
              only:
                - master
          requires:
            - build-image
            - unit
            - lint
            - smoke
            - cloud-e2e
            # TODO: uncomment this when we disable cloud-e2e
            # - cloud-e2e-k8s-idpe
      - monitor-ci-tests
commands:
  install_jsonnet_binary:
    description: >
      This will install the jsonnet binary.
    steps:
      - run:
          name: Install jsonnet binary
          command: curl -sSL https://github.com/google/jsonnet/releases/download/v0.16.0/jsonnet-bin-v0.16.0-linux.tar.gz | sudo tar -C /usr/local/bin -xz jsonnet && sudo chmod 0755 /usr/local/bin/jsonnet

  install_kind_binary:
    description: >
      This will install the kind binary.
    steps:
      - run:
          name: Install kind binary
          command: sudo curl -sSL -o /usr/local/bin/kind https://github.com/kubernetes-sigs/kind/releases/download/v0.8.1/kind-linux-amd64 && sudo chmod 0755 /usr/local/bin/kind

  install_kubecfg_binary:
    description: >
      This will install the kubecfg binary.
    steps:
      - run:
          name: Install kubecfg binary
          command: sudo curl -sSL -o /usr/local/bin/kubecfg https://github.com/bitnami/kubecfg/releases/download/v0.16.0/kubecfg-linux-amd64 && sudo chmod 0755 /usr/local/bin/kubecfg

  install_kubectl_binary:
    description: >
      This will install the kubectl binary.
    steps:
      - run:
          name: Install kubectl binary
          command: sudo curl -sSL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl && sudo chmod 0755 /usr/local/bin/kubectl

  checkout_k8s_idpe:
    description: >
      This will checkout k8s-idpe
    steps:
      - run:
          command: ./ui/scripts/checkout-repo.bash
          name: Checkout k8s-idpe repo
          environment:
            REPO: k8s-idpe
            BRANCH: master
  checkout_idpe:
    description: >
      This will checkout idpe
    steps:
      - run:
          command: ./ui/scripts/checkout-repo.bash
          name: Checkout idpe repo
          environment:
            REPO: idpe
            BRANCH: master
  checkout_monitor_ci:
    description: >
      This will checkout monitor-ci
    steps:
      - add_ssh_keys:
          fingerprints:
            - "5f:c0:ef:38:b3:45:9e:f4:d5:2f:3b:8b:59:c2:fa:50"
      - run:
          command: ./ui/scripts/checkout-repo.bash
          name: Checkout monitor-ci repo
          environment:
            REPO: monitor-ci
            BRANCH: master
