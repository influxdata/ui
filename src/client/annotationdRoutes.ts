// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export type AnnotationList = any

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
    | 'request too large'
  readonly message: string
  readonly op?: string
  readonly err?: string
}

export type AnnotationCreateList = AnnotationCreate[]

export type AnnotationCreate = Annotation & {
  stream?: string
}

export interface Annotation {
  summary?: string
  message?: string
  stickers?: any
  startTime?: string
  endTime?: string
}

export type AnnotationEventList = AnnotationEvent[]

export type AnnotationEvent = Annotation & {
  stream?: string
  id?: string
}

export type StreamList = ReadStream[]

export interface ReadStream {
  id?: string
  stream?: string
  description?: string
  createdAt?: string
  updatedAt?: string
}

export interface Stream {
  stream?: string
  description?: string
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function(
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function(
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else if (responseContentType.includes('text')) {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function(
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function(
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)

export const setRequestHandler = rc.setRequestHandler.bind(rc)
export const setResponseHandler = rc.setResponseHandler.bind(rc)

export interface GetAnnotationsParams {
  query?: {
    AnnotationListFilter?: any
  }
}

type GetAnnotationsResult =
  | GetAnnotationsOKResult
  | GetAnnotationsBadRequestResult
  | GetAnnotationsUnauthorizedResult
  | GetAnnotationsMethodNotAllowedResult
  | GetAnnotationsInternalServerErrorResult

interface GetAnnotationsOKResult {
  status: 200
  headers: Headers
  data: AnnotationList
}

interface GetAnnotationsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetAnnotationsUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetAnnotationsMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface GetAnnotationsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getAnnotations = (
  params: GetAnnotationsParams,
  options: RequestOptions = {}
): Promise<GetAnnotationsResult> =>
  request('GET', '/api/v2private/annotations', params, options) as Promise<
    GetAnnotationsResult
  >

export interface PostAnnotationParams {
  data?: AnnotationCreateList
}

type PostAnnotationResult =
  | PostAnnotationOKResult
  | PostAnnotationNoContentResult
  | PostAnnotationBadRequestResult
  | PostAnnotationUnauthorizedResult
  | PostAnnotationMethodNotAllowedResult
  | PostAnnotationInternalServerErrorResult

interface PostAnnotationOKResult {
  status: 200
  headers: Headers
  data: AnnotationEventList
}

interface PostAnnotationNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostAnnotationBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostAnnotationUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PostAnnotationMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface PostAnnotationInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const postAnnotation = (
  params: PostAnnotationParams,
  options: RequestOptions = {}
): Promise<PostAnnotationResult> =>
  request(
    'POST',
    '/api/v2private/annotations',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostAnnotationResult>

export interface DeleteAnnotationsParams {
  query: {
    AnnotationDeleteFilter: any
  }
}

type DeleteAnnotationsResult =
  | DeleteAnnotationsNoContentResult
  | DeleteAnnotationsBadRequestResult
  | DeleteAnnotationsUnauthorizedResult
  | DeleteAnnotationsMethodNotAllowedResult
  | DeleteAnnotationsInternalServerErrorResult

interface DeleteAnnotationsNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteAnnotationsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteAnnotationsUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface DeleteAnnotationsMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface DeleteAnnotationsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteAnnotations = (
  params: DeleteAnnotationsParams,
  options: RequestOptions = {}
): Promise<DeleteAnnotationsResult> =>
  request('DELETE', '/api/v2private/annotations', params, options) as Promise<
    DeleteAnnotationsResult
  >

export interface GetAnnotationParams {
  annotationID: string
}

type GetAnnotationResult =
  | GetAnnotationOKResult
  | GetAnnotationBadRequestResult
  | GetAnnotationUnauthorizedResult
  | GetAnnotationMethodNotAllowedResult
  | GetAnnotationInternalServerErrorResult

interface GetAnnotationOKResult {
  status: 200
  headers: Headers
  data: AnnotationEvent
}

interface GetAnnotationBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetAnnotationUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetAnnotationMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface GetAnnotationInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getAnnotation = (
  params: GetAnnotationParams,
  options: RequestOptions = {}
): Promise<GetAnnotationResult> =>
  request(
    'GET',
    `/api/v2private/annotations/${params.annotationID}`,
    params,
    options
  ) as Promise<GetAnnotationResult>

export interface PutAnnotationParams {
  annotationID: string

  data?: AnnotationCreate
}

type PutAnnotationResult =
  | PutAnnotationOKResult
  | PutAnnotationBadRequestResult
  | PutAnnotationUnauthorizedResult
  | PutAnnotationMethodNotAllowedResult
  | PutAnnotationInternalServerErrorResult

interface PutAnnotationOKResult {
  status: 200
  headers: Headers
  data: AnnotationEvent
}

interface PutAnnotationBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PutAnnotationUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PutAnnotationMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface PutAnnotationInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const putAnnotation = (
  params: PutAnnotationParams,
  options: RequestOptions = {}
): Promise<PutAnnotationResult> =>
  request(
    'PUT',
    `/api/v2private/annotations/${params.annotationID}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutAnnotationResult>

export interface DeleteAnnotationParams {
  annotationID: string
}

type DeleteAnnotationResult =
  | DeleteAnnotationNoContentResult
  | DeleteAnnotationBadRequestResult
  | DeleteAnnotationUnauthorizedResult
  | DeleteAnnotationMethodNotAllowedResult
  | DeleteAnnotationInternalServerErrorResult

interface DeleteAnnotationNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteAnnotationBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteAnnotationUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface DeleteAnnotationMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface DeleteAnnotationInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteAnnotation = (
  params: DeleteAnnotationParams,
  options: RequestOptions = {}
): Promise<DeleteAnnotationResult> =>
  request(
    'DELETE',
    `/api/v2private/annotations/${params.annotationID}`,
    params,
    options
  ) as Promise<DeleteAnnotationResult>

export interface GetStreamsParams {
  query?: {
    StreamListFilter?: any
  }
}

type GetStreamsResult =
  | GetStreamsOKResult
  | GetStreamsBadRequestResult
  | GetStreamsUnauthorizedResult
  | GetStreamsMethodNotAllowedResult
  | GetStreamsInternalServerErrorResult

interface GetStreamsOKResult {
  status: 200
  headers: Headers
  data: StreamList
}

interface GetStreamsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetStreamsUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetStreamsMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface GetStreamsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getStreams = (
  params: GetStreamsParams,
  options: RequestOptions = {}
): Promise<GetStreamsResult> =>
  request('GET', '/api/v2private/streams', params, options) as Promise<
    GetStreamsResult
  >

export interface PutStreamsParams {
  data?: Stream
}

type PutStreamsResult =
  | PutStreamsOKResult
  | PutStreamsBadRequestResult
  | PutStreamsUnauthorizedResult
  | PutStreamsMethodNotAllowedResult
  | PutStreamsInternalServerErrorResult

interface PutStreamsOKResult {
  status: 200
  headers: Headers
  data: ReadStream
}

interface PutStreamsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PutStreamsUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PutStreamsMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface PutStreamsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const putStreams = (
  params: PutStreamsParams,
  options: RequestOptions = {}
): Promise<PutStreamsResult> =>
  request(
    'PUT',
    '/api/v2private/streams',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutStreamsResult>

export interface DeleteStreamsParams {
  query: {
    StreamDeleteFilter: any
  }
}

type DeleteStreamsResult =
  | DeleteStreamsNoContentResult
  | DeleteStreamsBadRequestResult
  | DeleteStreamsUnauthorizedResult
  | DeleteStreamsMethodNotAllowedResult
  | DeleteStreamsInternalServerErrorResult

interface DeleteStreamsNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteStreamsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteStreamsUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface DeleteStreamsMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface DeleteStreamsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteStreams = (
  params: DeleteStreamsParams,
  options: RequestOptions = {}
): Promise<DeleteStreamsResult> =>
  request('DELETE', '/api/v2private/streams', params, options) as Promise<
    DeleteStreamsResult
  >

export interface PutStreamParams {
  streamID: string

  data?: Stream
}

type PutStreamResult =
  | PutStreamOKResult
  | PutStreamBadRequestResult
  | PutStreamUnauthorizedResult
  | PutStreamMethodNotAllowedResult
  | PutStreamInternalServerErrorResult

interface PutStreamOKResult {
  status: 200
  headers: Headers
  data: ReadStream
}

interface PutStreamBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PutStreamUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PutStreamMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface PutStreamInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const putStream = (
  params: PutStreamParams,
  options: RequestOptions = {}
): Promise<PutStreamResult> =>
  request(
    'PUT',
    `/api/v2private/streams/${params.streamID}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutStreamResult>

export interface DeleteStreamParams {
  streamID: string
}

type DeleteStreamResult =
  | DeleteStreamNoContentResult
  | DeleteStreamBadRequestResult
  | DeleteStreamUnauthorizedResult
  | DeleteStreamMethodNotAllowedResult
  | DeleteStreamInternalServerErrorResult

interface DeleteStreamNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteStreamBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteStreamUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface DeleteStreamMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface DeleteStreamInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteStream = (
  params: DeleteStreamParams,
  options: RequestOptions = {}
): Promise<DeleteStreamResult> =>
  request(
    'DELETE',
    `/api/v2private/streams/${params.streamID}`,
    params,
    options
  ) as Promise<DeleteStreamResult>
