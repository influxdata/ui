{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "flux lang",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#root_parens"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#supports"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#regexps"
    }
  ],
  "repository": {
    "root_paren": {
      "begin": "\\(",
      "end": "(?<=\\()(\\))?|(?:\\))"
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flux",
          "match": "\\b(in|import|package|return|option|builtin|test|if|then|else|exists)\\b"
        },
        {
          "name": "keyword.operator",
          "match": "\\B(\\+|\\-|\\*|\\/|\\%|\\^|\\=\\=|<|>|\\!\\=|\\=\\~|\\!\\~|\\=|\\=>|<\\-)\\B"
        },
        {
          "name": "keyword.operator",
          "match": "\\b(and|or)\\b"
        },
        {
          "name": "keyword.operator.new",
          "match": "\\|>"
        },
        {
          "name": "constant.language",
          "match": "\\b(true|false|empty)\\b"
        },
        {
          "name": "constant.other",
          "match": "\\b(\\d{4}-\\d{2}-\\d{2}(T\\d{2}\\:\\d{2}\\:\\d{2}(\\.\\d*)?((Z|(\\+|\\-)\\d{2}:\\d{2}))?)?)\\b"
        },
        {
          "name": "constant.time",
          "match": "\\b(\\d*(y|mo|w|d|h|m|s|ms|us|Âµs|ns))+\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b((0(x|X)[0-9a-fA-F]*)|((\\d+\\.?\\d*)|(\\.\\d+)))\\b"
        }
      ]
    },
    "supports": {
      "patterns": [
        {
          "name": "support.function",
          "match": "\\b(from|to|buckets|join)\\b"
        },
        {
          "name": "support.function",
          "match": "(^|(?<=[(\\.?)|(\\|>\\s)]))([\\d\\w\\_]+)(?=\\()"
        },
        {
          "name": "support.function",
          "match": "\\b(fn)(?=\\:)\\b"
        }
      ]
    },
    "comments": {
      "name": "comment.line.double-slash",
      "begin": "//",
      "end": "\n|\r"
    },
    "strings": {
      "name": "string.quoted.double.flux",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.flux",
          "match": "\\\\."
        }
      ]
    },
    "regexps": {
      "name": "string.regexp",
      "begin": "/(?=\\S.*/)",
      "end": "[^\\\\/+]\\/"
    }
  },
  "scopeName": "flux"
}
