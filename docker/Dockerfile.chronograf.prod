FROM ubuntu:bionic AS base

RUN apt-get update -y && \
    apt-get install -y \
        nginx \
        build-essential \
        curl \
        git

FROM base AS repo
WORKDIR /repo

# env vars to configure the system

# Chooses where the static assets are served from
ARG STATIC_DIRECTORY=/static
# Allows for the frontend to be run under a different prefix
ARG BASE_PATH=/
# Same as above, but for the api
ARG API_BASE_PATH=/
# Triggers a bunch of optimizations
ARG NODE_ENV=production
# Allows for a faster webpack conf to be used during testing
ARG WEBPACK_FILE=prod
# Defines the string that shows up on the main page [for debugging deployments]
ARG INFLUXDB_SHA=local
# migrating to this one
ARG UI_SHA

# optional ones, used for production

# Where is quartz? normally it's behind /auth or we are in OSS mode
ARG CLOUD_URL
# Configure what honey badger uses for auth
ARG HONEYBADGER_KEY
# Throw any string up in the header, we use it for google tag manager
ARG INJECT_HEADER
# Injecting strings into the html never went wrong. we use this for google tag manager
ARG INJECT_BODY

ENV PATH="/node/bin:${PATH}"
RUN mkdir /node && \
    curl -sL https://git.io/n-install | N_PREFIX=/node bash -s -- -q

COPY . /repo/ui
WORKDIR /repo/ui

# these are all run together as docker's caching mechanism
# makes big steps like yarn install expensive
RUN npx yarn install --production=false && \
    npx yarn generate && \
    $(npm bin)/webpack --config ./webpack.${WEBPACK_FILE}.ts --bail && \
    rm -rf ./node_modules

RUN mkdir /includes

FROM nginx:stable-alpine AS deploy
WORKDIR /repo
COPY --from=repo /repo/ui/build /usr/share/nginx/html
COPY ./docker/nginx.conf /etc/nginx/nginx.conf
COPY ./docker/includes /includes
# RUN useradd --no-create-home nginx

EXPOSE 9999

CMD ["nginx", "-g", "daemon off;", "-c", "/etc/nginx/nginx.conf"]
