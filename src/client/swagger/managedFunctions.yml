openapi: '3.0.0'
info:
  title: Influxdata Managed Functions CRUD API
  version: 0.1.0
servers:
  - url: ''
paths:
  '/api/v2/functions':
    get:
      operationId: GetFunctions
      tags:
        - Functions
      summary: List all Functions
      parameters:
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: query
          name: limit
          description: The number of functions to return
          required: false
          schema:
            type: integer
        - in: query
          name: offset
          required: false
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: A list of functions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Functions'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: PostFunctions
      tags:
        - Functions
      summary: Create a new function
      requestBody:
        description: Function to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionCreateRequest'
      responses:
        '201':
          description: Function created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/v2/functions/trigger':
    post:
      operationId: PostFunctionsTrigger
      tags:
        - Functions
      summary: Manually trigger a function without creating an associated function resource
      requestBody:
        description: Function to be triggered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionTriggerRequest'
      responses:
        '200':
          description: Function successfully triggered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionTriggerResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/v2/functions/{functionID}':
    get:
      operationId: GetFunctionsID
      tags:
        - Functions
      summary: Retrieve a function
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
          description: The function ID.
      responses:
        '200':
          description: Function details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: PatchFunctionsID
      tags:
        - Functions
      summary: Update a function
      description: Update a function
      requestBody:
        description: Function update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionUpdateRequest'
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
          description: The function ID.
      responses:
        '200':
          description: Updated function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: DeleteFunctionsID
      tags:
        - Functions
      summary: Delete a function
      description: Deletes a function and all associated records
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
          description: The ID of the function to delete.
      responses:
        '204':
          description: Function deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/v2/functions/{functionID}/invoke':
    get:
      operationId: GetFunctionsIDInvoke
      tags:
        - Functions
      summary: Manually invoke a function with params in query
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
        - in: query
          name: params
          schema:
            type: object
            additionalProperties: true
          style: form
          explode: true
      responses:
        default:
          description: Response defined by function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionHTTPResponseData'
    post:
      operationId: PostFunctionsIDInvoke
      tags:
        - Functions
      summary: Manually invoke a function with params in request body
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionInvocationParams'
      responses:
        default:
          description: Response defined by function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionHTTPResponseData'
  '/api/v2/functions/{functionID}/runs':
    get:
      operationId: GetFunctionsIDRuns
      tags:
        - Functions
      summary: List runs for a function
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
          description: The ID of the function to get runs for.
        - in: query
          name: limit
          description: The number of functions to return
          required: false
          schema:
            type: integer
        - in: query
          name: offset
          required: false
          description: Offset for pagination
          schema:
            type: integer
      responses:
        '200':
          description: A list of function runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionRuns'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/v2/functions/{functionID}/runs/{runID}':
    get:
      operationId: GetFunctionsIDRunsID
      tags:
        - Functions
      summary: Retrieve a single run for a function
      parameters:
        - in: path
          name: functionID
          schema:
            type: string
          required: true
          description: The function ID.
        - in: path
          name: runID
          schema:
            type: string
          required: true
          description: The run ID.
      responses:
        '200':
          description: The run record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionRun'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      properties:
        code:
          description: Code is the machine-readable error code.
          readOnly: true
          type: string
          # This set of enumerations must remain in sync with the constants defined in errors.go
          enum:
            - internal error
            - not found
            - conflict
            - invalid
            - unprocessable entity
            - empty value
            - unavailable
            - forbidden
            - too many requests
            - unauthorized
            - method not allowed
        message:
          readOnly: true
          description: Message is a human-readable message.
          type: string
      required: [code, message]
    Function:
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        script:
          description: script is script to be executed
          type: string
        language:
          $ref: '#/components/schemas/FunctionLanguage'
        url:
          type: string
          description: invocation endpoint address
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required: [name, orgID, script]
    Functions:
      type: object
      properties:
        functions:
          type: array
          items:
            $ref: '#/components/schemas/Function'
    FunctionCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        script:
          description: script is script to be executed
          type: string
        language:
          $ref: '#/components/schemas/FunctionLanguage'
      required: [name, orgID, script, language]
    FunctionUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        script:
          description: script is script to be executed
          type: string
    FunctionHTTPResponseData:
      description: The data sent to end user when a function is invoked using http. User defined and dynamic
      type: object
    FunctionHTTPResponse:
      description: The full response sent to end user when a function is invoked using http
      allOf:
        - $ref: '#/components/schemas/FunctionHTTPResponseNoData'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/FunctionHTTPResponseData'
    FunctionHTTPResponseNoData:
      description: The full response sent to end user when a function is invoked using http
      properties:
        type:
          type: string
          enum: [http]
        dataType:
          type: string
          enum: [json]
        headers:
          type: object
        statusCode:
          type: string
          enum: [200, 500, 404]
    FunctionRunBase:
      description: Function trigger response or function run base, response field varies.
      type: object
      properties:
        id:
          readOnly: true
          type: string
        status:
          type: string
          enum: [ok, error]
        error:
          type: string
        logs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionRunLog'
        response:
          $ref: '#/components/schemas/FunctionHTTPResponseNoData'
        startedAt:
          type: string
          format: date-time
          readOnly: true
    FunctionTriggerResponse:
      description: The full response sent to end user when a function is invoked
      allOf:
        - $ref: '#/components/schemas/FunctionRunBase'
        - type: object
          properties:
            response:
              $ref: '#/components/schemas/FunctionHTTPResponse'
    FunctionRun:
      description: The record that is kept of a function run, does not include data returned to user
      allOf:
        - $ref: '#/components/schemas/FunctionRunBase'
        - type: object
          properties:
            response:
              $ref: '#/components/schemas/FunctionHTTPResponseNoData'
    FunctionRuns:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/FunctionRun'
    FunctionTriggerRequest:
      allOf:
        - $ref: '#/components/schemas/FunctionInvocationParams'
        - type: object
          properties:
            script:
              description: script is script to be executed
              type: string
            method:
              type: string
              enum: [GET, POST]
            orgID:
              type: string
            org:
              type: string
            language:
              $ref: '#/components/schemas/FunctionLanguage'
          required: [language, script, method]
    FunctionInvocationParams:
      type: object
      properties:
        params:
          type: object
    FunctionRunLog:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        severity:
          type: object
          enum:
            - DEBUG
            - INFO
    FunctionLanguage:
      type: string
      enum: [python, flux]
