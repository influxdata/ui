// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Functions {
  functions?: Function[]
}

export interface Function {
  readonly id?: string
  name: string
  description?: string
  orgID: string
  script: string
  language?: any
  readonly createdAt?: string
  url?: string
  readonly updatedAt?: string
}

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
  readonly message: string
}

export interface FunctionCreateRequest {
  name: string
  description?: string
  orgID: string
  script: string
  language: any
}

export interface FunctionTriggerRequest {
  script: string
  params?: any
  orgID?: string
  org?: string
  language: 'python'
}

export type FunctionRun = FunctionRunRecord & {
  result?: any
}

export interface FunctionRunRecord {
  readonly id?: string
  status?: string
  logs?: FunctionRunLog[]
  readonly startedAt?: string
}

export interface FunctionRunLog {
  message?: string
  timestamp?: string
  severity?: any
}

export interface FunctionUpdateRequest {
  name?: string
  description?: string
  script?: string
}

export interface FunctionRunRecords {
  functionrunrecords?: FunctionRunRecord[]
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function(
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function(
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else if (responseContentType.includes('text')) {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function(
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function(
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)

export const setRequestHandler = rc.setRequestHandler.bind(rc)
export const setResponseHandler = rc.setResponseHandler.bind(rc)

export interface GetApiV2privateFunctionsParams {
  query?: {
    org?: string
    orgID?: string
  }
}

type GetApiV2privateFunctionsResult =
  | GetApiV2privateFunctionsOKResult
  | GetApiV2privateFunctionsDefaultResult

interface GetApiV2privateFunctionsOKResult {
  status: 200
  headers: Headers
  data: Functions
}

interface GetApiV2privateFunctionsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getApiV2privateFunctions = (
  params: GetApiV2privateFunctionsParams,
  options: RequestOptions = {}
): Promise<GetApiV2privateFunctionsResult> =>
  request('GET', '/api/v2private/functions', params, options) as Promise<
    GetApiV2privateFunctionsResult
  >

export interface PostApiV2privateFunctionParams {
  data: FunctionCreateRequest
}

type PostApiV2privateFunctionResult =
  | PostApiV2privateFunctionCreatedResult
  | PostApiV2privateFunctionDefaultResult

interface PostApiV2privateFunctionCreatedResult {
  status: 201
  headers: Headers
  data: Function
}

interface PostApiV2privateFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postApiV2privateFunction = (
  params: PostApiV2privateFunctionParams,
  options: RequestOptions = {}
): Promise<PostApiV2privateFunctionResult> =>
  request(
    'POST',
    '/api/v2private/functions',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostApiV2privateFunctionResult>

export interface PostApiV2privateFunctionsTriggerParams {
  data: FunctionTriggerRequest
}

type PostApiV2privateFunctionsTriggerResult =
  | PostApiV2privateFunctionsTriggerOKResult
  | PostApiV2privateFunctionsTriggerDefaultResult

interface PostApiV2privateFunctionsTriggerOKResult {
  status: 200
  headers: Headers
  data: FunctionRun
}

interface PostApiV2privateFunctionsTriggerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postApiV2privateFunctionsTrigger = (
  params: PostApiV2privateFunctionsTriggerParams,
  options: RequestOptions = {}
): Promise<PostApiV2privateFunctionsTriggerResult> =>
  request(
    'POST',
    '/api/v2private/functions/trigger',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostApiV2privateFunctionsTriggerResult>

export interface GetApiV2privateFunctionParams {
  functionID: string
}

type GetApiV2privateFunctionResult =
  | GetApiV2privateFunctionOKResult
  | GetApiV2privateFunctionDefaultResult

interface GetApiV2privateFunctionOKResult {
  status: 200
  headers: Headers
  data: Function
}

interface GetApiV2privateFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getApiV2privateFunction = (
  params: GetApiV2privateFunctionParams,
  options: RequestOptions = {}
): Promise<GetApiV2privateFunctionResult> =>
  request(
    'GET',
    `/api/v2private/functions/${params.functionID}`,
    params,
    options
  ) as Promise<GetApiV2privateFunctionResult>

export interface PatchApiV2privateFunctionParams {
  functionID: string

  data: FunctionUpdateRequest
}

type PatchApiV2privateFunctionResult =
  | PatchApiV2privateFunctionOKResult
  | PatchApiV2privateFunctionDefaultResult

interface PatchApiV2privateFunctionOKResult {
  status: 200
  headers: Headers
  data: Function
}

interface PatchApiV2privateFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchApiV2privateFunction = (
  params: PatchApiV2privateFunctionParams,
  options: RequestOptions = {}
): Promise<PatchApiV2privateFunctionResult> =>
  request(
    'PATCH',
    `/api/v2private/functions/${params.functionID}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PatchApiV2privateFunctionResult>

export interface DeleteApiV2privateFunctionParams {
  functionID: string
}

type DeleteApiV2privateFunctionResult =
  | DeleteApiV2privateFunctionNoContentResult
  | DeleteApiV2privateFunctionDefaultResult

interface DeleteApiV2privateFunctionNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteApiV2privateFunctionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteApiV2privateFunction = (
  params: DeleteApiV2privateFunctionParams,
  options: RequestOptions = {}
): Promise<DeleteApiV2privateFunctionResult> =>
  request(
    'DELETE',
    `/api/v2private/functions/${params.functionID}`,
    params,
    options
  ) as Promise<DeleteApiV2privateFunctionResult>

export interface GetApiV2privateFunctionsRunsParams {
  functionID: string
}

type GetApiV2privateFunctionsRunsResult =
  | GetApiV2privateFunctionsRunsOKResult
  | GetApiV2privateFunctionsRunsDefaultResult

interface GetApiV2privateFunctionsRunsOKResult {
  status: 200
  headers: Headers
  data: FunctionRunRecords
}

interface GetApiV2privateFunctionsRunsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getApiV2privateFunctionsRuns = (
  params: GetApiV2privateFunctionsRunsParams,
  options: RequestOptions = {}
): Promise<GetApiV2privateFunctionsRunsResult> =>
  request(
    'GET',
    `/api/v2private/functions/${params.functionID}/runs`,
    params,
    options
  ) as Promise<GetApiV2privateFunctionsRunsResult>

export interface PostApiV2privateFunctionsRunParams {
  functionID: string
}

type PostApiV2privateFunctionsRunResult =
  | PostApiV2privateFunctionsRunCreatedResult
  | PostApiV2privateFunctionsRunDefaultResult

interface PostApiV2privateFunctionsRunCreatedResult {
  status: 201
  headers: Headers
  data: FunctionRun
}

interface PostApiV2privateFunctionsRunDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postApiV2privateFunctionsRun = (
  params: PostApiV2privateFunctionsRunParams,
  options: RequestOptions = {}
): Promise<PostApiV2privateFunctionsRunResult> =>
  request(
    'POST',
    `/api/v2private/functions/${params.functionID}/runs`,
    params,
    options
  ) as Promise<PostApiV2privateFunctionsRunResult>

export interface GetApiV2privateFunctionsRunParams {
  functionID: string
  runID: string
}

type GetApiV2privateFunctionsRunResult =
  | GetApiV2privateFunctionsRunOKResult
  | GetApiV2privateFunctionsRunDefaultResult

interface GetApiV2privateFunctionsRunOKResult {
  status: 200
  headers: Headers
  data: FunctionRun
}

interface GetApiV2privateFunctionsRunDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getApiV2privateFunctionsRun = (
  params: GetApiV2privateFunctionsRunParams,
  options: RequestOptions = {}
): Promise<GetApiV2privateFunctionsRunResult> =>
  request(
    'GET',
    `/api/v2private/functions/${params.functionID}/runs/${params.runID}`,
    params,
    options
  ) as Promise<GetApiV2privateFunctionsRunResult>
