version: 2.1

jobs:
  build-image:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Grab compose files
          command: git clone git@github.com:influxdata/monitor-ci.git
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing ./monitor-ci/.env
      - run:
          name: Build the ui docker image
          command: |
            cp ./monitor-ci/conf/chronograf/nginx.conf ./ui/
            docker build \
              --build-arg UI_SHA=testing \
              --build-arg CLOUD_URL=http://localhost/auth \
              --build-arg WEBPACK_FILE=fast \
              -t quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} \
              -f ./monitor-ci/docker/Dockerfile.chronograf.prod \
              ./ui
            mkdir -p docker-cache
            docker save -o docker-cache/image.tar quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1}
      - save_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - docker-cache
  build-prod-image:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Grab compose files
          command: git clone git@github.com:influxdata/monitor-ci.git
      - run:
          name: Build the ui docker image
          command: |
            cp ./monitor-ci/conf/chronograf/nginx.conf ./ui/
            docker build \
              --build-arg HONEYBADGER_KEY=${HONEYBADGER_KEY} \
              --build-arg INJECT_HEADER="<script>(function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', '${GTM_ID}'); </script>" \
              --build-arg INJECT_BODY="<!-- Google Tag Manager (noscript) --> <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=${GTM_ID}\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript> <!-- End Google Tag Manager (noscript) -->" \
              --build-arg UI_SHA=${CIRCLE_SHA1} \
              --build-arg CLOUD_URL=/auth \
              -t quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} \
              -f ./monitor-ci/docker/Dockerfile.chronograf.prod \
              ./ui
            mkdir -p docker-cache
            docker save -o docker-cache/image.tar quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1}
      - save_cache:
          key: UI_PROD_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - docker-cache
  deploy:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout:
          path: ./ui
      - restore_cache:
          key: UI_PROD_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Grab deploy files
          command: git clone git@github.com:influxdata/monitor-ci.git
      - run:
          name: Load the prod image
          command: |
            docker load < ~/docker-cache/image.tar
      - run:
          name: Push the image to quay
          command: |
            docker tag quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} quay.io/influxdb/influxdb-ui:latest
            docker push quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1}
            docker push quay.io/influxdb/influxdb-ui:latest
      - run:
          name: Deploy the image
          command: |
            cd ./monitor-ci/c2updater
            export C2UPDATER_SIGNING_KEY=${ARGO_KEY}
            GO111MODULE=on GOPATH=/go go mod download && go run ./ ${CIRCLE_SHA1} quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} quay.io/influxdb/influxdb-ui@$(docker image inspect quay.io/influxdb/influxdb-ui:${CIRCLE_SHA1} --format '{{.Id}}' | tr -d '\n')
  share-testing-image:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout:
          path: ./ui
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Load the prod image
          command: |
            docker load < ~/docker-cache/image.tar
      - run:
          name: Push the image to quay
          command: |
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
            docker push quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1}
            docker push quay.io/influxdb/ui-acceptance:latest
  cloud-e2e:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    parallelism: 10
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Grab compose files
          command: git clone git@github.com:influxdata/monitor-ci.git
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=cypress && make build NODE=ingress
            docker load < ~/docker-cache/image.tar
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run e2e tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.cloud.yml -f compose/fig.cypress.yml run cypress ./node_modules/.bin/cypress run --browser chrome --config numTestsKeptInMemory=1 --spec "$(cd ../ui; circleci tests glob "./cypress/e2e/**/*.test.ts" | circleci tests split | paste -sd "," -)"
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
  cloud-e2e-firefox:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    parallelism: 10
    working_directory: ~/
    resource_class: large
    steps:
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Grab compose files
          command: git clone git@github.com:influxdata/monitor-ci.git
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=cypress && make build NODE=ingress
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run e2e tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.cloud.yml -f compose/fig.cypress.yml run cypress ./node_modules/.bin/cypress run --browser firefox --config numTestsKeptInMemory=1 --spec "$(cd ../ui; circleci tests glob "./cypress/e2e/**/*.test.ts" | circleci tests split | paste -sd "," -)"
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
  smoke:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    working_directory: ~/
    resource_class: large
    steps:
      - restore_cache:
          key: UI_DOCKER_IMAGE_CACHE_{{ .Environment.CIRCLE_SHA1 }}
      - checkout:
          path: ./ui
      - run: docker login -u=$QUAY_USER -p=$QUAY_PASS quay.io
      - run:
          name: Grab compose files
          command: git clone git@github.com:influxdata/monitor-ci.git
      - run:
          name: Copy over the testing variables
          command: cp ./monitor-ci/env.testing ./monitor-ci/.env
      - run:
          name: Update the images we're using
          command: |
            cd ./monitor-ci && make update && make build NODE=ingress
            docker load < ~/docker-cache/image.tar
            docker tag quay.io/influxdb/ui-acceptance:${CIRCLE_SHA1} quay.io/influxdb/ui-acceptance:latest
      - run:
          name: Start the cluster
          command: cd ./monitor-ci; make start
      - run:
          name: Run smoke tests
          no_output_timeout: 30m
          command: |
            cd ./monitor-ci; docker-compose -f compose/fig.cloud.yml -f compose/fig.cypress.yml run cypress-smoke
      - store_test_results:
          path: monitor-ci/test-artifacts/results
      - store_artifacts:
          path: monitor-ci/test-artifacts/videos
          destination: test_artifacts/videos
      - store_artifacts:
          path: monitor-ci/test-artifacts/screenshots
          destination: test_artifacts/screenshots
  unit:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/influxdata/ui
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Restore Yarn Package Cache'
      - run:
          command: |
            set +e
            npx yarn install
            npx yarn prettier
          name: 'Install Dependencies'
      - run: yarn generate
      - run:
          name: parallel jest tests
          command: |
            set +e
            TESTFILES=$(circleci tests glob "src/**/*.test.ts*" | circleci tests split --split-by=timings)
            npx yarn test:circleci $TESTFILES
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
          destination: raw-test-output
      - save_cache:
          key: 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Save Yarn Package Cache'
          paths:
            - ~/.cache/yarn
  lint:
    docker:
      - image: circleci/golang:1.15-node
    working_directory: ~/influxdata/ui
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Restore Yarn Package Cache'
      - run:
          command: |
            set +e
            yarn install
          name: 'Install Dependencies'
      - run: yarn generate
      - run:
          name: parallel eslint
          command: |
            set +e
            TESTFILES=$(circleci tests glob "src/**/*.ts*" "cypress/**/*.ts*" | circleci tests split --split-by=filesize)
            yarn eslint:circleci $TESTFILES
      - save_cache:
          key: 'yarn-cached-packages-{{ checksum "yarn.lock" }}'
          name: 'Save Yarn Package Cache'
          paths:
            - ~/.cache/yarn

workflows:
  version: 2
  build:
    jobs:
      - build-image
      - build-prod-image:
          filters:
            branches:
              only:
                - master
      - unit
      - lint
      - cloud-e2e:
          requires:
            - build-image
      - smoke:
          requires:
            - build-image
      - cloud-e2e-firefox:
          requires:
            - build-image
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - build-prod-image
            - unit
            - lint
            - smoke
            - cloud-e2e
      - share-testing-image:
          filters:
            branches:
              only:
                - master
          requires:
            - build-image
            - unit
            - lint
            - smoke
            - cloud-e2e
